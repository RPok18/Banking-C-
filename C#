using System;
using System.ComponentModel.DataAnnotations;
using System.Dynamic;
using System.Runtime;

namespace MoneyApp
{
    // Money class to represent an amount of money with a currency
    public class Money
    {
      public decimal Amount{gett;private Set;}
      public string Currency{get;privateSet;}
public Money(decimal amount, string currency)
        {
            Amount = amount;
            Currency = currency;
        }
//Method to get the sign of the amount (+1 for positive, -1 for negative, 0 for zero)
public static class SignCalculator
{
    /// <summary>
    /// Returns the sign of the given amount:
    /// +1 for positive numbers
    /// -1 for negative numbers
    /// 0 for zero
    /// </summary>
    /// <param name="amount">The numeric value to check.</param>
    /// <returns>1 if positive, -1 if negative, 0 if zero</returns>
    public static int GetSign(double amount)
    {
        if (Math.Sign(amount) > 0)
            return 1;
        else if (Math.Sign(amount) < 0)
            return -1;
        else
            return 0;
    }
    var money1 = new Money(100.50m, "USD");
Console.WriteLine(money1.GetSign());     // Output: 1
Console.WriteLine(money1.ToString());    // Output: 100.50 USD

var money2 = new Money(-500m, "EUR");
Console.WriteLine(money2.GetSign());     // Output: -1
Console.WriteLine(money2.ToString());    // Output: -500 EUR

var money3 = new Money(0m, "RUB");
Console.WriteLine(money3.GetSign());     // Output: 0
Console.WriteLine(money3.ToString());    // Output: 0 RUB


try
{
    var invalidMoney = new Money(100m, null);
}
catch (ArgumentException ex)
{
    Console.WriteLine(ex.Message);       // Output: Currency cannot be null or empty
}
}
ecimal value = amount;
Console.WriteLine(value.ToString("C2"));
using System;

public class AmountManager
{
    private decimal amount;

    // Constructor to initialize the amount
    public AmountManager(decimal initialAmount)
    {
        amount = initialAmount;
    }

    // Method to set the sign of the amount
    public void SetSign(int sign)
    {
        if (sign != -1 && sign != 1)
        {
            throw new ArgumentException("Sign must be -1 or 1.");
        }
        amount = Math.Abs(amount) * sign;
    }

    // Method to set the integer part of the amount
    public void SetIntegerPart(int integerPart)
    {
        decimal fractionalPart = amount - Math.Truncate(amount);
        amount = integerPart + fractionalPart;
    }

    // Method to set the fractional part of the amount
    public void SetFractionalPart(double fractionalPart)
    {
        if (fractionalPart < 0 || fractionalPart >= 1)
        {
            throw new ArgumentException("Fractional part must be between 0 and 1.");
        }
        int integerPart = (int)Math.Truncate(amount);
        amount = integerPart + (decimal)fractionalPart;
    }

    // Method to set the currency value
    public void SetCurrency(decimal newCurrency)
    {
        amount = newCurrency;
    }

    // Method to get the current amount
    public decimal GetAmount()
    {
        return amount;
    }

    // Optional: Method to display the current value
    public void DisplayAmount()
    {
        Console.WriteLine($"Current Amount: {amount:C}");
    }
}
public class AmountManager
{
    private decimal amount;

    // Constructor to initialize the amount
    public AmountManager(decimal initialAmount)
    {
        amount = initialAmount;
    }

    // Method to get the sign of the amount
    public int GetSign()
    {
        return amount < 0 ? -1 : 1; // Return -1 if negative, 1 if positive
    }

    // Method to get the integer part of the amount
    public int GetIntegerPart()
    {
        return (int)Math.Truncate(Math.Abs(amount)); // Return absolute integer part
    }

    // Method to get the fractional part of the amount
    public double GetFractionalPart()
    {
        return Math.Abs(amount) - Math.Truncate(Math.Abs(amount)); // Calculate fractional part
    }

    // Method to set a new amount (for demonstration purposes)
    public void SetAmount(decimal newAmount)
    {
        amount = newAmount;
    }

    // Method to get the current amount
    public decimal GetAmount()
    {
        return amount;
    }

    // Optional: Method to display the current value
    public void DisplayAmount()
    {
        Console.WriteLine($"Current Amount: {amount:C}");
    }
}
